{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","services/persons.js","components/Notification.js","App.js","index.js"],"names":["Filter","newSearchName","handleSearchNameChange","type","value","onChange","PersonForm","addPerson","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","Persons","persons","deletePerson","map","person","key","name","number","onClick","baseUrl","axios","get","newObject","post","id","put","delete","Notification","message","className","App","useState","setPersons","setNewName","setNewNumber","setNewSearchName","notificationMessage","setNotificationMessage","notificationType","setNotificationType","useEffect","personService","then","response","data","event","target","result","filter","includes","console","log","preventDefault","copy","findName","findNumber","length","window","alert","confirm","personObject","catch","error","setTimeout","concat","status","update","p","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.112a832d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Filter = ({newSearchName, handleSearchNameChange}) => {\n  return (\n    <div>\n      filter shown with <input type=\"text\" value={newSearchName} onChange={handleSearchNameChange} />\n    </div>\n  );\n};\n\nexport default Filter;","import React from 'react';\n\nconst PersonForm = ({addPerson, newName, newNumber, handleNameChange, handleNumberChange}) => {\n  return (\n    <form onSubmit={addPerson}>\n      <div>\n        name: <input value={newName} \n        onChange={handleNameChange}/>\n        <div>\n          number: <input value={newNumber}\n          onChange={handleNumberChange}/>\n        </div>\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default PersonForm;","import React from 'react';\n// import personService from '../services/persons'\n\nconst Persons = ({ persons, deletePerson}) => {\n\n  \n\n  return (\n    <div>\n      {persons.map(person => \n        <div key={person.name}>\n         {person.name} {person.number} <button onClick={() => deletePerson(person)}>delete</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Persons;","import axios from 'axios'\n\n// const baseUrl = 'http://localhost:3001/api/persons'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nconst deletePerson = (id) => {\n  return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default { getAll, create, update, deletePerson }","import React from 'react';\n\nconst Notification = ({ type, message }) => {\n  if (type === 'error') {\n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"success\">\n        {message}\n      </div>\n    );\n  }\n};\n\nexport default Notification;","import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport personService from './services/persons'\nimport Notification from './components/Notification'\nimport './index.css';\n\nconst App = () => {\n  // [\n  //   { name: 'Arto Hellas', number: '040-123456' },\n  //   { name: 'Ada Lovelace', number: '39-44-5323523' },\n  //   { name: 'Dan Abramov', number: '12-43-234345' },\n  //   { name: 'Mary Poppendieck', number: '39-23-6423122' }\n  // ]\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newSearchName, setNewSearchName] = useState('')\n  const [notificationMessage, setNotificationMessage] = useState('prompt')\n  // const [errorMessage, setErrorMessage] = useState('some error happened...')\n  const [notificationType, setNotificationType] = useState('success')\n\n  useEffect(() => {\n    // axios.get('http://localhost:3001/persons')\n    //   .then(response => {\n    //     setPersons(response.data)\n    //   })\n    personService.getAll()\n      .then(response => {\n        setPersons(response.data)\n      })\n  }, [])\n\n  const handleSearchNameChange = (event) => {\n    // event.preventDefault()\n\n    setNewSearchName(event.target.value)\n    // console.log(event.target.value);\n    \n    const copy = [...persons]\n    const result = copy.filter(person => \n      person.name.includes(event.target.value)\n    )\n    console.log('result:', result);\n    setPersons(result)\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const copy = [...persons]\n    const findName = copy.filter(person => person.name === newName)\n    const findNumber = copy.filter(person => person.number === newNumber)\n    if (findName.length > 0 && findNumber.length > 0) {\n      window.alert(`${newName} is already added to phonebook`)\n    } else if (findName.length > 0) {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n          const personObject = { ...findName[0], number: newNumber }\n          personService.update(findName[0].id, personObject)\n            .then(response => {\n              console.log('response: ', response);\n              setPersons(persons.map(person => person.name !== newName ? person : response.data))\n              setNewName('')\n              setNewNumber('')\n            }).catch (error => {\n              setNotificationType('error')\n              setNotificationMessage(\n                `Information of '${newName}' has already been removed from server`\n              )\n              setTimeout(() => {\n                setNotificationMessage(null)\n              }, 5000)\n            })\n        }\n    } else {\n      const personObject = { name: newName, number: newNumber }\n      // axios.post('http://localhost:3001/persons', personObject)\n      //   .then(response => {\n      //     console.log('response.data:', response.data)\n      //     setPersons(persons.concat(response.data))\n      //     setNewName('')\n      //     setNewNumber('')\n      //   })\n      personService\n        .create(personObject)\n        .then(response => {\n          setPersons(persons.concat(response.data))\n          setNotificationMessage(`Added ${newName}`)\n          setNotificationType('success')\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 3000)\n          setNewName('')\n          setNewNumber('')\n        })\n    }\n  }\n\n  const deletePerson = (person) => {\n    console.log(`delete person ${person.id}` )\n    if (window.confirm(`Delete ${person.name}`)) {\n      personService.deletePerson(person.id)\n      .then(response => {\n        console.log('response: ', response);\n        if (response.status === 200) {\n          const update = [...persons].filter(p => p.id !== person.id)\n          setPersons(update)\n        } else {\n          // 提示删除出错\n        }\n      })\n    }\n    \n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>   \n      <Notification type={notificationType} message={notificationMessage}/>\n      <Filter newSearchName={newSearchName} handleSearchNameChange={handleSearchNameChange}/>\n      <h2>add a new</h2> \n      <PersonForm addPerson={addPerson} newName={newName} handleNameChange={handleNameChange} \n        newNumber={newNumber} handleNumberChange={handleNumberChange}/>\n      <h2>Numbers</h2>\n      <Persons persons={persons} deletePerson={deletePerson}/>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}